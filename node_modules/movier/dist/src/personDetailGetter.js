"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPersonDetailsByIMDBId = exports.getPersonDetailsByName = exports.getPersonDetailsByFoundedPersonDetails = exports.getPersonDetailsByUrl = void 0;
const enums_1 = require("./enums");
const personSearcher_1 = require("./personSearcher");
const IMDBPersonDetailsResolver_1 = require("./resolvers/IMDBPersonDetailsResolver");
const convertIMDBTitleIdToUrl_1 = require("./utils/convertIMDBTitleIdToUrl");
const guessSourceTypeByUrl_1 = require("./utils/guessSourceTypeByUrl");
async function getPersonDetailsByUrl(titleUrl) {
    const sourceType = (0, guessSourceTypeByUrl_1.guessSourceTypeByUrl)(titleUrl);
    //  select the resolver
    let resolver;
    switch (sourceType) {
        case enums_1.Source.IMDB:
        default:
            resolver = new IMDBPersonDetailsResolver_1.IMDBPersonDetailsResolver(titleUrl);
    }
    // get details from resolver
    let result;
    try {
        result = await resolver.getDetails();
    }
    catch (e) {
        throw new Error("failed to get the result from IMDB : " + e.message);
    }
    if (!result) {
        throw new Error("there was a problem in getting title details, title resolver returned empty data");
    }
    return result;
}
exports.getPersonDetailsByUrl = getPersonDetailsByUrl;
async function getPersonDetailsByFoundedPersonDetails(foundedTitleDetails) {
    return getPersonDetailsByUrl(foundedTitleDetails.url);
}
exports.getPersonDetailsByFoundedPersonDetails = getPersonDetailsByFoundedPersonDetails;
async function getPersonDetailsByName(personName, { exactMatch = false } = {}) {
    const allResults = await (0, personSearcher_1.searchPersonByName)(personName, {
        exactMatch,
    });
    if (!allResults.length) {
        throw new Error(`there wasn't any matched person with the given name : '${personName}'`);
    }
    return getPersonDetailsByFoundedPersonDetails(allResults[0]);
}
exports.getPersonDetailsByName = getPersonDetailsByName;
async function getPersonDetailsByIMDBId(personId) {
    return getPersonDetailsByUrl((0, convertIMDBTitleIdToUrl_1.convertIMDBTitleIdToUrl)(personId, enums_1.IMDBPathType.Name));
}
exports.getPersonDetailsByIMDBId = getPersonDetailsByIMDBId;
