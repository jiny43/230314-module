"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTitleDetailsByIMDBId = exports.getTitleDetailsByName = exports.getTitleDetailsByFoundedTitleDetails = exports.getTitleDetailsByUrl = void 0;
const enums_1 = require("./enums");
const IMDBTitleDetailsResolver_1 = require("./resolvers/IMDBTitleDetailsResolver");
const guessSourceTypeByUrl_1 = require("./utils/guessSourceTypeByUrl");
const titleSearcher_1 = require("./titleSearcher");
const convertIMDBTitleIdToUrl_1 = require("./utils/convertIMDBTitleIdToUrl");
async function getTitleDetailsByUrl(titleUrl, opts) {
    const sourceType = (0, guessSourceTypeByUrl_1.guessSourceTypeByUrl)(titleUrl);
    //  select the resolver
    let resolver;
    switch (sourceType) {
        case enums_1.Source.IMDB:
        default:
            resolver = new IMDBTitleDetailsResolver_1.IMDBTitleDetailsResolver(titleUrl);
    }
    // get details from resolver
    let result;
    try {
        result = await resolver.getDetails(opts);
    }
    catch (e) {
        throw new Error("failed to get the result from IMDB : " + e.message);
    }
    if (!result) {
        throw new Error("there was a problem in getting title details, title resolver returned empty data");
    }
    return result;
}
exports.getTitleDetailsByUrl = getTitleDetailsByUrl;
async function getTitleDetailsByFoundedTitleDetails(foundedTitleDetails, opts) {
    return getTitleDetailsByUrl(foundedTitleDetails.url, opts);
}
exports.getTitleDetailsByFoundedTitleDetails = getTitleDetailsByFoundedTitleDetails;
async function getTitleDetailsByName(titleName, { exactMatch = false, specificType } = {}, opts) {
    const allResults = await (0, titleSearcher_1.searchTitleByName)(titleName, {
        exactMatch,
        specificType,
    });
    if (!allResults.length) {
        throw new Error(`there wasn't any matched title with the given name : '${titleName}'`);
    }
    return getTitleDetailsByFoundedTitleDetails(allResults[0], opts);
}
exports.getTitleDetailsByName = getTitleDetailsByName;
async function getTitleDetailsByIMDBId(titleId, opts) {
    return getTitleDetailsByUrl((0, convertIMDBTitleIdToUrl_1.convertIMDBTitleIdToUrl)(titleId), opts);
}
exports.getTitleDetailsByIMDBId = getTitleDetailsByIMDBId;
