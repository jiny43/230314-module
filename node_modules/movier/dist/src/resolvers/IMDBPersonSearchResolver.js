"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMDBPersonSearchResolver = void 0;
const constants_1 = require("../constants");
const ResolverCacheManager_1 = require("../utils/ResolverCacheManager");
const cheerio_1 = require("cheerio");
const formatHTMLText_1 = require("../utils/formatHTMLText");
const enums_1 = require("../enums");
const convertIMDBPathToIMDBUrl_1 = require("../utils/convertIMDBPathToIMDBUrl");
const extractIMDBIdFromUrl_1 = require("../utils/extractIMDBIdFromUrl");
const requestClient_1 = require("../requestClient");
class IMDBPersonSearchResolver {
    constructor(queryName, { exactMatch = false } = {}) {
        this.resolverCacheManager = new ResolverCacheManager_1.ResolverCacheManager();
        this.queryName = queryName;
        this.exactMatch = exactMatch;
    }
    async getResult() {
        await this.loadSearchPageHTMLData();
        const unsortedSearchResultList = this.originalResultList;
        // do sort and filters
        const finalResult = unsortedSearchResultList.sort((a, b) => b.matchScore - a.matchScore);
        return finalResult;
    }
    async loadSearchPageHTMLData() {
        // getting result from imdb page by http request
        const result = await (0, requestClient_1.getRequest)(constants_1.IMDB_TITLE_SEARCH_URL, {
            q: this.queryName,
            exact: this.exactMatch,
            s: "nm",
        });
        // parse page content for jquery like
        this.searchPageHTMLData = result.data;
        this.searchPageCheerio = (0, cheerio_1.load)(this.searchPageHTMLData);
    }
    get originalResultList() {
        const $ = this.searchPageCheerio;
        const isType1 = !!$(".find-name-result").length;
        if (isType1) {
            return this.originalResultListType1;
        }
        return this.originalResultListType2;
    }
    get originalResultListType1() {
        const cacheDataManager = this.resolverCacheManager.load("originalResultList");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const result = [];
        const $ = this.searchPageCheerio;
        $(".find-name-result").each((i, el) => {
            const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find("a").first().attr("href"));
            result.push({
                matchScore: 20 - i > 0 ? 20 - i : 1,
                name: (0, formatHTMLText_1.formatHTMLText)($(el).find(".ipc-metadata-list-summary-item__t").first().text()),
                source: {
                    sourceType: enums_1.Source.IMDB,
                    sourceUrl,
                    sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, "nm"),
                },
                thumbnailImageUrl: $(el).find("img").first().attr("src") ?? "",
                url: sourceUrl,
            });
        });
        return cacheDataManager.cacheAndReturnData(result);
    }
    get originalResultListType2() {
        const cacheDataManager = this.resolverCacheManager.load("originalResultList");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const result = [];
        const $ = this.searchPageCheerio;
        $("tr.findResult").each((i, el) => {
            const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find("a").first().attr("href"));
            result.push({
                matchScore: 20 - i > 0 ? 20 - i : 1,
                name: (0, formatHTMLText_1.formatHTMLText)($(el).find(".result_text a").first().text()),
                source: {
                    sourceType: enums_1.Source.IMDB,
                    sourceUrl,
                    sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, "nm"),
                },
                thumbnailImageUrl: $(el).find("img").first().attr("src") ?? "",
                url: sourceUrl,
            });
        });
        return cacheDataManager.cacheAndReturnData(result);
    }
}
exports.IMDBPersonSearchResolver = IMDBPersonSearchResolver;
