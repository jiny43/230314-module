"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMDBPersonDetailsResolver = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const enums_1 = require("../enums");
const cheerio_1 = require("cheerio");
const enums_2 = require("../enums");
const ResolverCacheManager_1 = require("../utils/ResolverCacheManager");
const extractIMDBIdFromUrl_1 = require("../utils/extractIMDBIdFromUrl");
const formatHTMLText_1 = require("../utils/formatHTMLText");
const stripHTMLText_1 = require("../utils/stripHTMLText");
const convertIMDBPathToIMDBUrl_1 = require("../utils/convertIMDBPathToIMDBUrl");
const getIMDBFullSizeImageFromThumbnailUrl_1 = require("../utils/getIMDBFullSizeImageFromThumbnailUrl");
const requestClient_1 = require("../requestClient");
const convertIMDBTitleIdToUrl_1 = require("../utils/convertIMDBTitleIdToUrl");
const personFilmographyQuery_1 = require("../gql/personFilmographyQuery");
class IMDBPersonDetailsResolver {
    constructor(url) {
        this.resolverCacheManager = new ResolverCacheManager_1.ResolverCacheManager();
        this.mainPageNextData = {};
        this.filmographyData = {};
        this.url = url;
    }
    async getDetails() {
        await Promise.all([
            this.getMainPageHTMLData(),
            this.getFilmographyData(),
            this.getBioPageHTMLData(),
            this.getMediaIndexPageHTMLData(),
        ]);
        return this.generateReturnDetailsData();
    }
    async getMainPageHTMLData() {
        const apiResult = await (0, requestClient_1.getRequest)(this.url);
        this.mainPageHTMLData = apiResult.data;
        this.mainPageCheerio = (0, cheerio_1.load)(apiResult.data);
        const nextDataString = this.mainPageCheerio("#__NEXT_DATA__")?.html()?.trim() || "{}";
        this.mainPageNextData = JSON.parse(nextDataString);
    }
    async getBioPageHTMLData() {
        const url = this.addToPathOfUrl(this.url, "/bio");
        const apiResult = await (0, requestClient_1.getRequest)(url);
        this.bioPageHTMLData = apiResult.data;
        this.bioPageCheerio = (0, cheerio_1.load)(apiResult.data);
    }
    async getMediaIndexPageHTMLData() {
        const url = this.addToPathOfUrl(this.url, "/mediaindex");
        const apiResult = await (0, requestClient_1.getRequest)(url);
        this.mediaIndexPageHTMLData = apiResult.data;
        this.mediaIndexPageCheerio = (0, cheerio_1.load)(apiResult.data);
    }
    async getFilmographyData() {
        const apiResult = await (0, requestClient_1.graphqlRequest)(personFilmographyQuery_1.personFilmographyQuery, {
            id: this.sourceId,
        });
        this.filmographyData = apiResult;
    }
    addToPathOfUrl(originalPath, joinPath, query = {}) {
        const urlInstance = new URL(originalPath);
        urlInstance.pathname = urlInstance.pathname.replace(/\/$/, "") + joinPath;
        Object.keys(query).forEach((key) => {
            urlInstance.searchParams.set(key, query[key]);
        });
        return urlInstance.href;
    }
    generateReturnDetailsData() {
        const result = {
            detailsLang: enums_2.Language.English,
            mainSource: this.mainSourceDetails,
            name: this.name,
            miniBio: this.miniBio,
            knownFor: this.knownFor,
            filmography: this.filmography,
            profileImage: this.profileImage,
            allImages: this.allImages,
            personalDetails: this.personalDetails,
            birthDate: this.birthDate,
            birthPlace: this.birthPlace,
            deathDate: this.deathDate,
            deathPlace: this.deathPlace,
        };
        return result;
    }
    get mainSourceDetails() {
        const cacheDataManager = this.resolverCacheManager.load("mainSourceDetails");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        return cacheDataManager.cacheAndReturnData({
            sourceId: this.sourceId,
            sourceType: enums_1.Source.IMDB,
            sourceUrl: this.url,
        });
    }
    get sourceId() {
        const cacheDataManager = this.resolverCacheManager.load("sourceId");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        return cacheDataManager.cacheAndReturnData((0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(this.url, "nm"));
    }
    get name() {
        const cacheDataManager = this.resolverCacheManager.load("name");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const name = (0, formatHTMLText_1.formatHTMLText)(this.mainPageNextData.props?.pageProps?.aboveTheFold?.nameText?.text);
        return cacheDataManager.cacheAndReturnData(name);
    }
    get miniBio() {
        const cacheDataManager = this.resolverCacheManager.load("miniBio");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const $ = this.bioPageCheerio;
        const miniBioFullHTML = $("a[name='mini_bio']")
            .next("h4")
            .next(".soda")
            .find("p")
            .first()
            .html() ?? "";
        const miniBio = miniBioFullHTML
            .split(/<br><br>/)
            .map((t) => (0, stripHTMLText_1.stripHTMLText)(t.trim()));
        return cacheDataManager.cacheAndReturnData(miniBio);
    }
    get knownFor() {
        const cacheDataManager = this.resolverCacheManager.load("knownFor");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const knownForItems = [];
        const $ = this.mainPageCheerio;
        const knownForContainerElements = $("[data-testid='nm_flmg_kwn_for'] .ipc-list-card--span");
        knownForContainerElements.each((i, el) => {
            const years = $(el)
                .find(".ipc-primary-image-list-card__content-bottom .ipc-primary-image-list-card__secondary-text")
                .text()
                .trim()
                .split(" ")[0]
                .split("â€“")
                .map(Number);
            const thumbnailImgEl = $(el).find("img").first();
            knownForItems.push({
                name: (0, formatHTMLText_1.formatHTMLText)($(el).find(".ipc-primary-image-list-card__title").first().text()),
                role: (0, formatHTMLText_1.formatHTMLText)($(el)
                    .find(".ipc-primary-image-list-card__content-mid-bottom .ipc-primary-image-list-card__secondary-text")
                    .first()
                    .text()),
                startYear: years[0],
                endYear: years[1] ?? years[0],
                posterImage: this.extractImageFullDetailsFromImgElement(thumbnailImgEl),
                source: this.extractSourceDetailsFromAElement($(el).find("a.ipc-lockup-overlay").first(), "tt"),
            });
        });
        return cacheDataManager.cacheAndReturnData(knownForItems);
    }
    extractImageFullDetailsFromImgElement(thumbnailImgEl, type = enums_1.ImageType.Poster) {
        const thumbnailUrl = thumbnailImgEl.attr("src");
        return {
            isThumbnail: false,
            sourceType: enums_1.Source.IMDB,
            title: thumbnailImgEl.attr("alt") ?? "",
            type: type,
            url: (0, getIMDBFullSizeImageFromThumbnailUrl_1.getIMDBFullSizeImageFromThumbnailUrl)(thumbnailUrl),
            thumbnails: [
                {
                    isThumbnail: true,
                    sourceType: enums_1.Source.IMDB,
                    title: thumbnailImgEl.attr("alt") ?? "",
                    type: type,
                    url: thumbnailUrl ?? "",
                    size: {
                        width: Number(thumbnailImgEl.attr("width")) || 0,
                        height: Number(thumbnailImgEl.attr("height")) || 0,
                    },
                },
            ],
        };
    }
    extractSourceDetailsFromAElement(aElement, sourceIdPrefix) {
        const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)(aElement.attr("href"));
        return {
            sourceType: enums_1.Source.IMDB,
            sourceUrl,
            sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, sourceIdPrefix),
        };
    }
    get filmography() {
        const cacheDataManager = this.resolverCacheManager.load("filmography");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        let filmographyItems = [];
        filmographyItems =
            this.filmographyData?.name?.credits?.edges?.map((credit) => {
                const startYear = credit.node?.episodeCredits?.yearRange?.year ??
                    credit.node?.title?.releaseYear?.year ??
                    0;
                return {
                    category: credit.node?.category?.text?.toLocaleLowerCase() ?? "",
                    endYear: credit.node?.episodeCredits?.yearRange?.endYear ?? startYear,
                    name: credit.node?.title?.originalTitleText?.text ?? "",
                    productionStatus: credit.node?.title?.productionStatus?.currentProductionStage
                        ?.id ?? "",
                    roles: credit.node?.characters?.map((i) => i.name ?? "") ?? [],
                    source: {
                        sourceId: credit.node?.title?.id ?? "",
                        sourceType: enums_1.Source.IMDB,
                        sourceUrl: (0, convertIMDBTitleIdToUrl_1.convertIMDBTitleIdToUrl)(credit.node?.title?.id ?? "", enums_1.IMDBPathType.Title),
                    },
                    startYear,
                    type: enums_1.TitleMainType.Movie,
                };
            }) ?? [];
        return cacheDataManager.cacheAndReturnData(filmographyItems);
    }
    get profileImage() {
        const cacheDataManager = this.resolverCacheManager.load("profileImage");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const $ = this.bioPageCheerio;
        const imgElement = $(".poster").first();
        if (!imgElement.length) {
            return;
        }
        const imageDetails = this.extractImageFullDetailsFromImgElement(imgElement, enums_1.ImageType.ProfileImage);
        return cacheDataManager.cacheAndReturnData(imageDetails);
    }
    get allImages() {
        const cacheDataManager = this.resolverCacheManager.load("allImages");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const $ = this.mediaIndexPageCheerio;
        const images = [];
        $("#media_index_thumbnail_grid a img").each((i, el) => {
            images.push(this.extractImageFullDetailsFromImgElement($(el), enums_1.ImageType.Other));
        });
        return cacheDataManager.cacheAndReturnData(images);
    }
    get personalDetails() {
        const cacheDataManager = this.resolverCacheManager.load("personalDetails");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const $ = this.bioPageCheerio;
        const personalDetails = [];
        const extractDetailsFromTableRow = (trEl) => {
            const a = $(trEl).find("td:eq(1)").find("a").first();
            const aUrl = a.attr("href");
            personalDetails.push({
                title: (0, formatHTMLText_1.formatHTMLText)($(trEl).find("td:eq(0)").text(), {
                    toLowerCase: true,
                }),
                details: (0, formatHTMLText_1.formatHTMLText)($(trEl)
                    .find("td:eq(1)")
                    .text()
                    .replace(/\s{2,}/g, " ")),
                relatedSources: aUrl?.startsWith("/name/nm")
                    ? [this.extractSourceDetailsFromAElement(a, "nm")]
                    : [],
            });
        };
        $("a[name='overview']")
            .next("h4")
            .next("table")
            .find("tr")
            .each((i, trEl) => extractDetailsFromTableRow(trEl));
        $("a[name='family']")
            .next("h4")
            .next("table")
            .find("tr")
            .each((i, trEl) => extractDetailsFromTableRow(trEl));
        return cacheDataManager.cacheAndReturnData(personalDetails);
    }
    get birthDate() {
        const cacheDataManager = this.resolverCacheManager.load("birthDate");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const birthDateRaw = this.mainPageNextData?.props?.pageProps?.mainColumnData?.birthDate
            ?.dateComponents;
        const birthDate = (0, dayjs_1.default)(`${birthDateRaw?.year}-${birthDateRaw?.month}-${birthDateRaw?.day}`, "YYYY-M-D").toDate();
        return cacheDataManager.cacheAndReturnData(birthDate);
    }
    get birthPlace() {
        const cacheDataManager = this.resolverCacheManager.load("birthPlace");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const birthPlace = this.mainPageNextData?.props?.pageProps?.mainColumnData?.birthLocation
            ?.text ?? "";
        if (!birthPlace.length) {
            return;
        }
        return cacheDataManager.cacheAndReturnData((0, formatHTMLText_1.formatHTMLText)(birthPlace));
    }
    get deathDate() {
        const cacheDataManager = this.resolverCacheManager.load("deathDate");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const deathDateRaw = this.mainPageNextData?.props?.pageProps?.mainColumnData?.deathDate
            ?.dateComponents;
        if (!deathDateRaw) {
            return;
        }
        const deathDate = (0, dayjs_1.default)(`${deathDateRaw.year}-${deathDateRaw.month}-${deathDateRaw.day}`, "YYYY-M-D").toDate();
        return cacheDataManager.cacheAndReturnData(deathDate);
    }
    get deathPlace() {
        const cacheDataManager = this.resolverCacheManager.load("deathPlace");
        if (cacheDataManager.hasData) {
            return cacheDataManager.data;
        }
        const deathLocation = this.mainPageNextData?.props?.pageProps?.mainColumnData?.deathLocation
            ?.text ?? "";
        if (!deathLocation.length) {
            return;
        }
        return cacheDataManager.cacheAndReturnData((0, formatHTMLText_1.formatHTMLText)(deathLocation));
    }
}
exports.IMDBPersonDetailsResolver = IMDBPersonDetailsResolver;
